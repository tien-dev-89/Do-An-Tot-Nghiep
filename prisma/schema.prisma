generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employees {
  employee_id         String              @id @default(uuid())
  full_name           String
  avatar_url          String?
  email               String              @unique
  phone_number        String?             @db.VarChar(15)
  birth_date          DateTime?
  gender              Gender?
  address             String?
  department_id       String?
  position_id         String?
  employment_status   EmploymentStatus
  join_date           DateTime?
  leave_date          DateTime?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  attendance          AttendanceRecords[]
  contracts           Contracts[]
  managed_departments Departments[]       @relation("Manager")
  department          Departments?        @relation(fields: [department_id], references: [department_id])
  position            Positions?          @relation(fields: [position_id], references: [position_id])
  approved_requests   LeaveRequests[]     @relation("Approver")
  leave_requests      LeaveRequests[]
  notifications       Notifications[]
  payrolls            Payrolls[]
  RewardPenalties     RewardPenalties[]   @relation("Approver")
  reward_penalties    RewardPenalties[]
  SalaryConfig        SalaryConfig?
  user_roles          UserRoles[]
  user                Users?
}

model Departments {
  department_id String      @id @default(uuid())
  manager_id    String?
  name          String
  email         String?
  phone_number  String?     @db.VarChar(15)
  description   String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  manager       Employees?  @relation("Manager", fields: [manager_id], references: [employee_id])
  employees     Employees[]
}

model Positions {
  position_id String      @id @default(uuid())
  name        String
  description String?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  employees   Employees[]
}

model AttendanceRecords {
  attendance_id       String    @id @default(uuid())
  employee_id         String
  date                DateTime
  clock_in_time       DateTime?
  clock_out_time      DateTime?
  shift_id            String?
  late_minutes        Int       @default(0)
  early_leave_minutes Int       @default(0)
  overtime_hours      Decimal   @default(0.00)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  status              String
  employee            Employees @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
  shift               Shifts?   @relation(fields: [shift_id], references: [shift_id])
}

model LeaveRequests {
  leave_request_id String      @id @default(uuid())
  employee_id      String
  leave_type       LeaveType
  start_date       DateTime
  end_date         DateTime
  reason           String?
  status           LeaveStatus @default(PENDING)
  approver_id      String?
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  approver         Employees?  @relation("Approver", fields: [approver_id], references: [employee_id])
  employee         Employees   @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
}

model Payrolls {
  payroll_id     String        @id @default(uuid())
  employee_id    String
  month          String
  base_salary    Decimal
  overtime_bonus Decimal       @default(0.00)
  late_penalty   Decimal       @default(0.00)
  total_salary   Decimal
  status         PayrollStatus @default(UNPAID)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  employee       Employees     @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
}

model RewardPenalties {
  id          String              @id @default(uuid())
  employee_id String
  type        RewardPenaltyType
  amount      Decimal
  reason      String
  month       String
  status      RewardPenaltyStatus @default(PENDING)
  approver_id String?
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  approver    Employees?          @relation("Approver", fields: [approver_id], references: [employee_id])
  employee    Employees           @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
}

model Roles {
  role_id     String            @id @default(uuid())
  name        String            @unique
  description String?
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  permissions RolePermissions[]
  user_roles  UserRoles[]
}

model RolePermissions {
  permission_id String @id
  role_id       String
  resource      String
  action        String
  role          Roles  @relation(fields: [role_id], references: [role_id])

  @@index([role_id])
}

model UserRoles {
  user_role_id String    @id @default(uuid())
  employee_id  String
  role_id      String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  employee     Employees @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
  role         Roles     @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
}

model Notifications {
  notification_id String           @id @default(uuid())
  employee_id     String
  title           String
  message         String
  type            NotificationType
  is_read         Boolean          @default(false)
  created_at      DateTime         @default(now())
  contract_id     String?
  contract        Contracts?       @relation(fields: [contract_id], references: [contract_id])
  employee        Employees        @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
}

model EmailQueue {
  email_id   String      @id @default(uuid())
  to_email   String
  subject    String
  body       String
  status     EmailStatus @default(PENDING)
  send_at    DateTime?
  created_at DateTime    @default(now())
}

model Users {
  user_id               String               @id @default(uuid())
  employee_id           String               @unique
  username              String               @unique
  email                 String               @unique
  password_hash         String
  is_active             Boolean              @default(true)
  last_login_at         DateTime?
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  login_logs            LoginLogs[]
  password_reset_tokens PasswordResetToken[]
  employee              Employees            @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
}

model LoginLogs {
  log_id     String   @id @default(uuid())
  user_id    String
  username   String
  activity   String
  status     String
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())
  user       Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model PasswordResetToken {
  token_id   String   @id @default(uuid())
  user_id    String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  user       Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Contracts {
  contract_id   String          @id @default(uuid())
  employee_id   String
  start_date    DateTime
  end_date      DateTime
  status        ContractStatus
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  employee      Employees       @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
  notifications Notifications[]
}

model Shifts {
  shift_id          String              @id @default(uuid())
  name              String
  start_time        String
  end_time          String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  AttendanceRecords AttendanceRecords[]
}

model SalaryConfig {
  id                String     @id @default(uuid())
  employee_id       String?    @unique
  base_salary       Decimal    @default(0.00)
  overtime_rate     Decimal    @default(0.00)
  late_penalty_rate Decimal    @default(0.00)
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  employee          Employees? @relation(fields: [employee_id], references: [employee_id])
}

enum Gender {
  MALE
  FEMALE
}

enum EmploymentStatus {
  ACTIVE
  PROBATION
  TERMINATED
  MATERNITY_LEAVE
}

enum LeaveType {
  ANNUAL
  SICK
  PERSONAL
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PayrollStatus {
  PAID
  UNPAID
}

enum NotificationType {
  PERSONAL
  INTERNAL
  SYSTEM
  CONTRACT
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum ContractStatus {
  ACTIVE
  EXPIRING
  EXPIRED
}

enum RewardPenaltyType {
  REWARD
  PENALTY
}

enum RewardPenaltyStatus {
  PENDING
  APPROVED
  REJECTED
}
